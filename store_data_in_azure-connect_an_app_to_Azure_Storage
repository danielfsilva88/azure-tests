###### Important: To use Azure CLI at Azure Portal you must create a first Storage Account with a File share entity enabled

## Create a new app to work with Azure storage
## https://docs.microsoft.com/en-us/learn/modules/connect-an-app-to-azure-storage/

### Unit 3 of 12: Create a .NET Core application
#### C# option

dotnet new console --name PhotoSharingApp

cd PhotoSharingApp

dotnet run

###### The output "Hello World!" should display in the console.


###### Now, we are going to change to JavaScript option

mv PhotoSharingApp/ PhotoSharingApp_C#


#### JavaScript option

mkdir PhotoSharingApp

cd PhotoSharingApp
npm init -y

cat << EOF > index.js
#!/usr/bin/env node

function main() {
    console.log('Hello, World!');
}

main();
EOF

node index.js


### Unit 4 of 12: Create a storage account

###### Important: set env variables before running command to create storage account below
###### To check which Resource Groups exists: az group list

az storage account create \
  --resource-group $RESOURCEGROUPNAME \
  --location $LOCATION \
  --sku Standard_LRS \
  --name $STGACCNAME


### Unit 6 of 12: Add the storage client library to your app

#### Preparation

cd ..

mv PhotoSharingApp PhotoSharingApp_JS

#### C# option

cd PhotoSharingApp_C#

dotnet add package Azure.Storage.Blobs

dotnet run

#### JavaScript option

cd ../PhotoSharingApp_JS

npm install @azure/storage-blob --save

node index.js



### Unit 8 of 12: Add Azure Storage configuration to your app

#### C# option

cd ../PhotoSharingApp_C#

cat << EOF > appsettings.json
{
    "ConnectionStrings": {
        "StorageAccount": "<value>"
    }
}
EOF

STGACCENDPOINT=$(az storage account show-connection-string \
  --resource-group $RESOURCEGROUPNAME \
  --query connectionString \
  --name $STGACCNAME)

sed -i 's@"<value>"@'$STGACCENDPOINT'@' appsettings.json

###### Note: I still didn't know how to edit multiple lines through sed/awk

vi PhotoSharingApp.csproj

###### Note: add following <None> block inside <ItemGroup> block
<ItemGroup>
    <None Update="appsettings.json">
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
</ItemGroup>

###### Save and exit.

dotnet add package Microsoft.Extensions.Configuration.Json

vi Program.cs

###### Note: At the top of the file is a using System; line. Immediately below that line, add the following lines of code:
using Microsoft.Extensions.Configuration;
using System.IO;

###### Note: Replace the contents of the Main method (the line that contains "Hello World!") with the following code:
var builder = new ConfigurationBuilder()
    .SetBasePath(Directory.GetCurrentDirectory())
    .AddJsonFile("appsettings.json");

var configuration = builder.Build();

###### Save and exit.


#### JavaScript option

cd ../PhotoSharingApp_JS

AZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string \
  --resource-group $RESOURCEGROUPNAME \
  --query connectionString \
  --name $STGACCNAME)

echo AZURE_STORAGE_CONNECTION_STRING=$(echo $AZURE_STORAGE_CONNECTION_STRING) > .env

npm install dotenv --save

###### Note: I still didn't know how to edit multiple lines through sed/awk

vi index.js

###### Note: At the top of the file, is a line of code #!/usr/bin/env node. 
####### Underneath that line, add following line of code:

require('dotenv').config();

###### Save and exit.


### Unit 9 of 12: Connect your application to your Azure Storage account

#### C# option

cd ../PhotoSharingApp_C#

vi Program.cs

###### Note: To use the Azure Storage Blobs client library for .NET in your program, 
####### you need to add a using statement at the top of your program for the Azure.Storage.Blobs namespace.

using Azure.Storage.Blobs;

###### Note: Add the following code to the Main section of your application to get the Azure 
####### Storage connection string and create the BlobContainerClient object.

var connectionString = configuration.GetConnectionString("StorageAccount");
string containerName = "photos";

BlobContainerClient container = new BlobContainerClient(connectionString, containerName);

container.CreateIfNotExists();

###### Save and exit.

dotnet run

###### Note: You can verify you have created the container by running the following Azure CLI command. 

az storage container list \
--account-name $STGACCNAME


#### JavaScript option

cd ../PhotoSharingApp_JS

vi index.js

###### Note: Add the following statement immediately after the require('dotenv').config(); statement.

const { BlobServiceClient } = require("@azure/storage-blob");

###### Note: you need to create a BlobServiceClient object in your code by obtaining the storage 
####### account connection string and passing it to the factory method fromConnectionString 
####### on the BlobServiceClient object. Add the following lines of code:

const storageAccountConnectionString = process.env.AZURE_STORAGE_CONNECTION_STRING;
const blobServiceClient = BlobServiceClient.fromConnectionString(storageAccountConnectionString);

async function main() {
  // Create a container (folder) if it does not exist
  const containerName = 'photos';
  const containerClient = blobServiceClient.getContainerClient(containerName);
  const createContainerResponse = await containerClient.createIfNotExists();
  console.log(`Create container ${containerName} successfully`, createContainerResponse.succeeded);
}

###### Save and exit.

node index.js

###### Note: You can verify you have created the container by running the following Azure CLI command. 

az storage container list --connection-string $AZURE_STORAGE_CONNECTION_STRING --account-name $STGACCNAME



### Unit 10 of 12: Upload an image to your Azure Storage account

#### C# option

cd ../PhotoSharingApp_C#

wget https://github.com/MicrosoftDocs/mslearn-connect-app-to-azure-storage/blob/main/images/docs-and-friends-selfie-stick.png?raw=true -O docs-and-friends-selfie-stick.png

vi Program.cs

###### Note: After you have a BlobClient object, you can call the Upload method to upload 
####### a file to Azure Blob Storage.

string blobName = "docs-and-friends-selfie-stick";
string fileName = "docs-and-friends-selfie-stick.png";
BlobClient blobClient = container.GetBlobClient(blobName);
blobClient.Upload(fileName, true);

var blobs = container.GetBlobs();
foreach (var blob in blobs)
{
    Console.WriteLine($"{blob.Name} --> Created On: {blob.Properties.CreatedOn:yyyy-MM-dd HH:mm:ss}  Size: {blob.Properties.ContentLength}");
}

###### Save and exit.

dotnet run


#### JavaScript option

cd ../PhotoSharingApp_JS

wget https://github.com/MicrosoftDocs/mslearn-connect-app-to-azure-storage/blob/main/images/docs-and-friends-selfie-stick.png?raw=true -O docs-and-friends-selfie-stick.png

vi index.js

###### Note: Add this code to your index.js program immediately after the code that creates the container:

const filename = 'docs-and-friends-selfie-stick.png';
const blockBlobClient = containerClient.getBlockBlobClient(filename);
blockBlobClient.uploadFile(filename);

let blobs = containerClient.listBlobsFlat();
let blob = await blobs.next();
while (!blob.done) {
    console.log(`${blob.value.name} --> Created: ${blob.value.properties.createdOn}   Size: ${blob.value.properties.contentLength}`);
    blob = await blobs.next();
}

###### Save and exit.

node index.js
